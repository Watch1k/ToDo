{"version":3,"sources":["enums/index.ts","components/Header/HeaderStyles.tsx","components/Header/Header.tsx","components/Main/MainStyles.js","constants/index.tsx","actions/index.tsx","components/Form/FormStyles.tsx","components/Form/Form.tsx","containers/FormContainer.ts","components/Item/ItemStyles.tsx","components/Item/IItem.tsx","components/List/List.tsx","containers/ListContainer.ts","components/Filter/FilterStyles.ts","components/Filter/Filter.tsx","containers/FilterContainer.ts","components/DarkMode/DarkMode.tsx","containers/DarkModeContainer.ts","components/Main/Main.tsx","reducers/todos.tsx","reducers/visibilityFilter.ts","reducers/index.tsx","reducers/darkMode.ts","store/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["VisibilityFiltersEnum","headerStyles","padding","display","justifyContent","titleStyles","marginBottom","Title","Header","style","layoutStyles","border","background","VisibilityFilters","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","nextTodoId","addTodo","text","type","id","editTodo","toggleTodo","deleteTodo","setVisibilityFilter","visibilityFilter","setDarkMode","darkMode","iconStyles","color","ToDoForm","props","useState","value","setValue","layout","onSubmit","e","preventDefault","Item","prefix","placeholder","onChange","currentTarget","htmlType","connect","state","todos","dispatch","bindActionCreators","inputStyles","margin","editStyles","confirmStyles","deleteStyles","completeStyles","fontSize","completeIconStyles","React","memo","item","isEdit","setEdit","completed","setCompleted","handleEdit","handleDelete","handleConfirm","handleCompleted","actions","key","icon","onClick","theme","twoToneColor","Meta","title","ToDoList","map","filterTodos","createSelector","filter","todo","filterStyles","textAlign","Filter","Group","target","DarkMode","checked","Main","justify","DarkModeContainer","FormContainer","FilterContainer","ListContainer","defaultState","combineReducers","action","store","createStore","rootReducer","composeWithDevTools","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9eed1c5c.chunk.js","sourcesContent":["export enum VisibilityFiltersEnum {\n  SHOW_ALL = 'SHOW_ALL',\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\n}\n","export const headerStyles = {\n  padding: 30,\n  display: 'flex',\n  justifyContent: 'center',\n};\n\nexport const titleStyles = {\n  marginBottom: 0,\n};","import React from 'react';\nimport { Typography } from 'antd';\nimport { headerStyles, titleStyles } from './HeaderStyles';\n\nconst { Title } = Typography;\n\nconst Header = () => (\n  <header style={headerStyles}>\n    <Title style={titleStyles}>ToDo List</Title>\n  </header>\n);\n\nexport default Header;\n","export const layoutStyles = {\n  padding: 30,\n  border: '1px solid #ddd',\n  background: '#e6f7ff'\n}\n","import { VisibilityFiltersEnum } from '../enums'\n\nexport const ADD_TODO = 'ADD_TODO'\nexport const EDIT_TODO = 'EDIT_TODO'\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const DELETE_TODO = 'DELETE_TODO'\n\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\n\nexport const VisibilityFilters = {\n  SHOW_ALL: VisibilityFiltersEnum.SHOW_ALL,\n  SHOW_COMPLETED: VisibilityFiltersEnum.SHOW_COMPLETED,\n  SHOW_ACTIVE: VisibilityFiltersEnum.SHOW_ACTIVE,\n}\n\nexport const SET_DARK_MODE = 'SET_DARK_MODE'\n","import * as Redux from 'redux'\nimport { ADD_TODO, DELETE_TODO, EDIT_TODO, SET_DARK_MODE, SET_VISIBILITY_FILTER, TOGGLE_TODO } from '../constants'\nimport { IVisibilityFilter } from '../interfaces/state'\n\nexport interface ITodoAction extends Redux.Action {\n  text: string\n  id: number\n}\n\nlet nextTodoId = 0\n\nexport const addTodo = (text: string) => ({\n  type: ADD_TODO,\n  id: nextTodoId++,\n  text,\n})\n\nexport const editTodo = (text: string, id: number) => ({\n  type: EDIT_TODO,\n  text,\n  id,\n})\n\nexport const toggleTodo = (id: number) => ({\n  type: TOGGLE_TODO,\n  id,\n})\n\nexport const deleteTodo = (id: number) => ({\n  type: DELETE_TODO,\n  id,\n})\n\nexport interface IVisibilityFilterAction extends Redux.Action {\n  visibilityFilter: IVisibilityFilter\n}\n\nexport const setVisibilityFilter = (visibilityFilter: IVisibilityFilter) => ({\n  type: SET_VISIBILITY_FILTER,\n  visibilityFilter,\n})\n\nexport interface ISetDarkMode extends Redux.Action {\n  darkMode: boolean\n}\n\nexport const setDarkMode = (darkMode: boolean) =>\n  ({\n    type: SET_DARK_MODE,\n    darkMode,\n  })\n","import React from 'react'\n\nexport const iconStyles: React.CSSProperties = {\n  color: 'rgba(0,0,0,.25)',\n}\n","import React, { useState } from 'react'\nimport { Button, Form, Icon, Input } from 'antd'\nimport { iconStyles } from './FormStyles'\nimport { IToDoFormProps } from '../../containers/FormContainer'\n\nconst ToDoForm = (props: IToDoFormProps) => {\n  const [value, setValue] = useState('')\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setValue(e.currentTarget.value)\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    props.addTodo(value)\n  }\n\n  return (\n    <Form layout=\"inline\" onSubmit={handleSubmit}>\n      <Form.Item>\n        <Input\n          value={value}\n          prefix={<Icon type=\"unordered-list\" style={iconStyles} />}\n          placeholder=\"New task...\"\n          onChange={handleChange}\n        />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Create\n        </Button>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default ToDoForm\n","import { connect } from 'react-redux'\nimport { addTodo } from '../actions'\nimport ToDoForm from '../components/Form/Form'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { IState } from '../interfaces/state'\n\nconst mapStateToProps = (state: IState) => ({\n  todos: state.todos,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  ...bindActionCreators({ addTodo }, dispatch),\n})\n\nexport type IToDoFormProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoForm)\n","export const inputStyles = {\n  margin: 0,\n}\n\nexport const editStyles = {\n  color: '#fff',\n  background: '#7cb305',\n}\n\nexport const confirmStyles = {\n  ...editStyles,\n}\n\nexport const deleteStyles = {\n  color: '#fff',\n  background: '#ff7875',\n}\n\nexport const completeStyles = {\n  fontSize: 20,\n}\n\nexport const completeIconStyles = {\n  color: '#d9d9d9',\n}\n","import React, { useState } from 'react'\nimport { Button, Icon, Input, List } from 'antd'\nimport { completeIconStyles, completeStyles, confirmStyles, deleteStyles, editStyles, inputStyles } from './ItemStyles'\nimport { IListDispatchProps } from '../../containers/ListContainer'\nimport { ITodo } from '../../interfaces/state'\n\ntype IProps = IListDispatchProps & { item: ITodo }\n\nconst Item = (props: IProps) => {\n  const { item } = props\n  const [isEdit, setEdit] = useState(false)\n  const [value, setValue] = useState(item.text)\n  const [completed, setCompleted] = useState(false)\n\n  const handleEdit = () => {\n    setEdit(true)\n  }\n\n  const handleDelete = () => {\n    props.deleteTodo(item.id)\n  }\n\n  const handleConfirm = () => {\n    props.editTodo(value, item.id)\n    setEdit(false)\n  }\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setValue(e.currentTarget.value)\n  }\n\n  const handleCompleted = () => {\n    props.toggleTodo(item.id)\n    setCompleted(completed => !completed)\n  }\n\n  const getActionButtons: () => React.ReactElement[] = () => ([\n    isEdit\n      ? (<Button\n          key=\"btn_1\"\n          icon=\"check\"\n          onClick={handleConfirm}\n          style={confirmStyles}\n        />\n      ) : (<Button\n        key=\"btn_2\"\n        icon=\"edit\"\n        onClick={handleEdit}\n        style={editStyles}\n      />)\n    ,\n    <Button\n      key=\"btn_3\"\n      icon=\"delete\"\n      style={deleteStyles}\n      onClick={handleDelete}\n    />,\n    <Button\n      key=\"btn_4\"\n      type=\"link\"\n      style={completeStyles}\n      onClick={handleCompleted}\n    >\n      <Icon\n        type=\"check-circle\"\n        theme={completed ? 'twoTone' : 'outlined'}\n        style={completeIconStyles}\n        twoToneColor=\"#52c41a\"\n        onClick={handleCompleted}\n      />\n    </Button>,\n  ])\n\n  return (\n    <List.Item\n      actions={getActionButtons()}\n    >\n      <List.Item.Meta title={\n        isEdit\n          ? (<Input style={inputStyles} value={value} onChange={handleChange} />)\n          : (<p style={inputStyles}>{value}</p>)\n      } />\n    </List.Item>\n  )\n}\n\nexport default React.memo(Item)\n","import React from 'react'\nimport { List } from 'antd'\nimport { IListProps } from '../../containers/ListContainer'\nimport Item from '../Item/IItem'\n\nconst ToDoList = (props: IListProps) => (\n    <List>\n      {props.todos.map(item => (\n        <Item\n          key={item.id}\n          item={item}\n          editTodo={props.editTodo}\n          toggleTodo={props.toggleTodo}\n          deleteTodo={props.deleteTodo}\n        />\n      ))}\n    </List>\n  )\n\nexport default ToDoList\n","import { connect } from 'react-redux'\nimport { IState } from '../interfaces/state'\nimport ToDoList from '../components/List/List'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { deleteTodo, editTodo, toggleTodo } from '../actions'\nimport { createSelector } from 'reselect'\nimport { VisibilityFiltersEnum } from '../enums'\n\nconst getTodos = (state: IState) => state.todos\nconst getVisibilityFilter = (state: IState) => state.visibilityFilter\n\nconst filterTodos = createSelector(\n  [getTodos, getVisibilityFilter],\n  (todos, visibilityFilter) => {\n    switch (visibilityFilter) {\n      case VisibilityFiltersEnum.SHOW_ALL:\n        return todos\n      case VisibilityFiltersEnum.SHOW_COMPLETED:\n        return todos.filter(todo => todo.completed)\n      case VisibilityFiltersEnum.SHOW_ACTIVE:\n        return todos.filter(todo => !todo.completed)\n      default:\n        return todos\n    }\n  },\n)\n\nconst mapStateToProps = (state: IState) => ({\n  todos: filterTodos(state),\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  ...bindActionCreators({\n    editTodo,\n    toggleTodo,\n    deleteTodo,\n  }, dispatch),\n})\n\nexport type IListDispatchProps = ReturnType<typeof mapDispatchToProps>\n\nexport type IListProps = ReturnType<typeof mapStateToProps> & IListDispatchProps\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoList)\n","import React from 'react'\n\nexport const filterStyles: React.CSSProperties = { textAlign: 'center' }\n","import React, { useState } from 'react'\nimport { Card, Radio } from 'antd'\nimport { VisibilityFilters } from '../../constants'\n// import { filterStyles } from './FilterStyles'\nimport { IVisibilityFilterProps } from '../../containers/FilterContainer'\nimport { RadioChangeEvent } from 'antd/es/radio'\nimport { filterStyles } from './FilterStyles'\n\nconst Filter = (props: IVisibilityFilterProps) => {\n  const { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } = VisibilityFilters\n  const [value, setValue] = useState(SHOW_ALL)\n\n  const onChange = (e: RadioChangeEvent) => {\n    setValue(e.target.value)\n    props.setVisibilityFilter(e.target.value)\n  }\n\n  return (\n    <Card title=\"Filter:\" style={filterStyles}>\n      <Radio.Group onChange={onChange} value={value}>\n        <Radio value={SHOW_ALL}>Show all</Radio>\n        <Radio value={SHOW_COMPLETED}>Show completed</Radio>\n        <Radio value={SHOW_ACTIVE}>Show active</Radio>\n      </Radio.Group>\n    </Card>\n  )\n}\n\nexport default Filter\n","import { connect } from 'react-redux'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { IState } from '../interfaces/state'\nimport Filter from '../components/Filter/Filter'\nimport { setVisibilityFilter } from '../actions'\n\nconst mapStateToProps = (state: IState) => ({\n  visibilityFilter: state.visibilityFilter,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  ...bindActionCreators({ setVisibilityFilter }, dispatch),\n})\n\nexport type IVisibilityFilterProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\n","import React from 'react'\nimport { Switch } from 'antd'\nimport { IDarkModeProps } from '../../containers/DarkModeContainer'\n\nconst DarkMode = (props: IDarkModeProps) => {\n  const handleChange = (checked: boolean) => {\n    props.setDarkMode(checked)\n  }\n\n  return (\n    <Switch onChange={handleChange}>\n      Dark Mode\n    </Switch>\n  )\n}\n\nexport default DarkMode\n","import { connect } from 'react-redux'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { IState } from '../interfaces/state'\nimport DarkMode from '../components/DarkMode/DarkMode'\nimport { setDarkMode } from '../actions'\n\nconst mapStateToProps = (state: IState) => ({\n  darkMode: state.darkMode,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  ...bindActionCreators({ setDarkMode }, dispatch),\n})\n\nexport type IDarkModeProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DarkMode)\n","import React from 'react'\nimport { Divider, Layout, Row } from 'antd'\nimport { layoutStyles } from './MainStyles'\nimport FormContainer from '../../containers/FormContainer'\nimport ListContainer from '../../containers/ListContainer'\nimport FilterContainer from '../../containers/FilterContainer'\nimport DarkModeContainer from '../../containers/DarkModeContainer'\n\nexport const Main = () => (\n  <Layout style={layoutStyles}>\n    <Row type=\"flex\" justify=\"center\" style={{ margin: '30px 0' }}>\n      <DarkModeContainer />\n    </Row>\n    <Divider>Create task</Divider>\n    <Row type=\"flex\" justify=\"center\">\n      <FormContainer />\n    </Row>\n    <Row type=\"flex\" justify=\"center\" style={{ margin: '30px 0' }}>\n      <FilterContainer />\n    </Row>\n    <Divider>List of tasks</Divider>\n    <Row type=\"flex\" justify=\"center\">\n      <ListContainer />\n    </Row>\n  </Layout>\n)\n\nexport default Main\n","import { ADD_TODO, DELETE_TODO, EDIT_TODO, TOGGLE_TODO } from '../constants'\nimport { ITodoAction } from '../actions'\nimport { ITodo } from '../interfaces/state'\n\nconst defaultState: ITodo[] = [\n  { text: '1111', id: -3, completed: false },\n  { text: '2222', id: -2, completed: false },\n  { text: '3333', id: -1, completed: false },\n]\n\nexport const todos = (state: ITodo[] = defaultState, action: ITodoAction) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false,\n        },\n      ]\n    case EDIT_TODO:\n      return state.map(item => (\n        item.id === action.id\n          ? {\n            ...item,\n            text: action.text,\n          }\n          : item\n      ))\n    case TOGGLE_TODO:\n      return state.map(item => (\n        item.id === action.id\n          ? {\n            ...item,\n            completed: !item.completed,\n          }\n          : item\n      ))\n    case DELETE_TODO:\n      return state.filter(item => item.id !== action.id)\n    default:\n      return state\n  }\n}\n","import { IVisibilityFilter } from '../interfaces/state'\nimport { IVisibilityFilterAction } from '../actions'\nimport { VisibilityFilters } from '../constants'\nimport { VisibilityFiltersEnum } from '../enums'\n\nconst defaultState = VisibilityFilters.SHOW_ALL\n\nexport const visibilityFilter = (state: IVisibilityFilter = defaultState, action: IVisibilityFilterAction) => {\n  switch (action.visibilityFilter) {\n    case VisibilityFiltersEnum.SHOW_ALL:\n      return VisibilityFiltersEnum.SHOW_ALL\n    case VisibilityFiltersEnum.SHOW_ACTIVE:\n      return VisibilityFiltersEnum.SHOW_ACTIVE\n    case VisibilityFiltersEnum.SHOW_COMPLETED:\n      return VisibilityFiltersEnum.SHOW_COMPLETED\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { todos } from './todos'\nimport { visibilityFilter } from './visibilityFilter'\nimport { darkMode } from './darkMode'\n\nexport default combineReducers({\n  todos,\n  visibilityFilter,\n  darkMode,\n})\n","import { ISetDarkMode } from '../actions'\nimport { SET_DARK_MODE } from '../constants'\n\nconst defaultState = false\n\nexport const darkMode = (state: boolean = defaultState, action: ISetDarkMode) => {\n  if (action.type === SET_DARK_MODE) {\n    return action.darkMode\n  } else {\n    return defaultState\n  }\n}\n","import { createStore } from 'redux'\nimport rootReducer from '../reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nexport const store = createStore(rootReducer, composeWithDevTools())\n","import React from 'react'\nimport Header from './components/Header/Header'\nimport Main from './components/Main/Main'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Header/>\n      <Main />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}